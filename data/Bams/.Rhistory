filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF247FEJ", "ENCFF064MKY", "ENCFF667IDY", "ENCFF655LMK")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF247FEJ", "ENCFF064MKY", "ENCFF667IDY", "ENCFF655LMK")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF623OLU", "ENCFF691MHW", "ENCFF832UUS", "ENCFF343PTQ")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF662DYG", "ENCFF255IVU", "ENCFF832UUS", "ENCFF343PTQ")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF662DYG", "ENCFF255IVU", "ENCFF832UUS", "ENCFF343PTQ")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF662DYG", "ENCFF255IVU", "ENCFF832UUS", "ENCFF343PTQ")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF662DYG", "ENCFF255IVU", "ENCFF832UUS", "ENCFF343PTQ")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
sampleNames <- c("ENCFF662DYG", "ENCFF255IVU", "ENCFF832UUS", "ENCFF343PTQ")
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF662DYG", "ENCFF255IVU")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
setwd("~/GitHub/hemopoiesis-differentiation/data/BedFiles")
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF662DYG", "ENCFF255IVU")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF662DYG")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
read.csv(ENCFF255IVU.tsv)
read.csv("ENCFF255IVU.tsv)
read.csv("ENCFF255IVU.tsv")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF662DYG")
read.csv("ENCFF255IVU.tsv")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles"
sampleNames <- c("ENCFF662DYG")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles/"
sampleNames <- c("ENCFF662DYG")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles/"
sampleNames <- c("ENCFF662DYG", "ENCFF832UUS", "ENCFF343PTQ", "ENCFF255IVU")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
metaData <- data.frame(Group, row.names = colnames(countss))
Group=factor(c("HSC","HSC","CMP","CMP"))
library(DESeq2)
metaData <- data.frame(Group, row.names = colnames(countss))
colnames(countss)
countData.df <- do.call("cbind", countData.list)
colsToKeep <- c(1,grep("expected_count", names(countData.df)))
counts <- countData.df[,colsToKeep]
countss <- counts[rowSums(counts[,(2:5)]) > 0, ]
names(countss) <- c("gene_id",sampleNames)
countss[,2:5] <- round(countss[,2:5])
countss=na.omit(countss)
library(DESeq2)
metaData <- data.frame(Group, row.names = colnames(countss))
colnames(countss)
library(DESeq2)
metaData <- data.frame(Group, row.names = colnames(countss[2:5,]))
atacDDS <- DESeqDataSetFromM
library(DESeq2)
metaData <- data.frame(Group, row.names = colnames(countss[,2:5]))
atacDDS <- DESeqDataSetFromMatrix(myCounts, metaData, ~Group, rowRanges = consensusToCount)
atacDDS <- DESeq(atacDDS)
atacDDS <- DESeqDataSetFromMatrix(myCounts, metaData, ~Group, rowRanges = consensusToCount)
atacDDS <- DESeqDataSetFromMatrix(countss, metaData, ~Group, rowRanges = consensusToCount)
atacDDS <- DESeqDataSetFromMatrix(countss[2:5], metaData, ~Group, rowRanges = consensusToCount)
atacDDS <- DESeqDataSetFromMatrix(countss[2:5], metaData, ~Group)
atacDDS <- DESeq(atacDDS)
atac_Rlog <- rlog(atacDDS)
plotPCA(atac_Rlog, intgroup = "Group", ntop = nrow(atac_Rlog))
load("ATAC_Data/ATAC_RData/countsFromATAC.RData")
HSCMinusCMP <- results(atacDDS, c("Group", "HSC", "MCP"), format = "GRanges")
HSCMinusCMP <- results(atacDDS, c("Group", "HSC", "MCP"), format = "GRangesList")
HSCMinusCMP <- results(atacDDS, c("Group", "HSC", "CMP"), format = "GRangesList")
HSCMinusCMP <- results(atacDDS, c("Group", "HSC", "CMP"), format = "GRangesList")
HSCMinusCMP <- HSCMinusCMP[order(HSCMinusCMP$pvalue)]
HSCMinusCMP
library(DESeq2)
library(BSgenome.Mmusculus.UCSC.mm10)
library(tracktables)
BiocManager::instal("tracktables")
BiocManager::install("tracktables")
library(BSgenome.Mmusculus.UCSC.mm10)
BiocManager::install(BSgenome.Mmusculus.UCSC.mm10)
BiocManager::install("BSgenome.Mmusculus.UCSC.mm10")
BiocManager::install("chipseeker")
BiocManager::install("chipseeker")
BiocManager::install("ChIPseeker")
library(DESeq2)
library(BSgenome.Mmusculus.UCSC.mm10)
library(tracktables)
HSCMinusCMP <- results(atacDDS, c("Group", "HSC", "CMP"), format = "GRangesList")
HSCMinusCMP <- HSCMinusCMP[order(HSCMinusCMP$pvalue)]
HSCMinusCMP
library(ChIPseeker)
anno_LiverMinusHindbrain <- annotatePeak(HSCMinusCMP, TxDb = TxDb.Mmusculus.UCSC.mm10.knownGene)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library("TxDb.Mmusculus.UCSC.mm10.knownGene")
BiocManager::install("TxDb.Mmusculus.UCSC.mm10.knownGene")
library("TxDb.Mmusculus.UCSC.mm10.knownGene")
anno_LiverMinusHindbrain <- annotatePeak(HSCMinusCMP, TxDb = TxDb.Mmusculus.UCSC.mm10.knownGene)
anno_LiverMinusHindbrain <- annotatePeak(HSCMinusCMP, TxDb = TxDb.Mmusculus.UCSC.mm10.knownGene)
setwd("~/GitHub/hemopoiesis-differentiation")
anno_LiverMinusHindbrain <- annotatePeak(, TxDb = TxDb.Mmusculus.UCSC.mm10.knownGene)
BiocManager::install(c("ChIPQC","rtracklayer","DT", "tidyr"))
library(ChIPQC)
library(rtracklayer)
library(DT)
library(dplyr)
library(tidyr)
setwd("~/GitHub/hemopoiesis-differentiation/data/Bams")
blkList <- import.bed("blacklist.full.bed")
openRegionPeaks <- "ENCFF711QAL_peaks.narrowPeak"
qcRes <- ChIPQCsample("ENCFF711QAL,bam, peaks = openRegionPeaks, annotation = "mm10", chromosomes = "chr20", blacklist = blkList,
verboseT = FALSE)
qcRes <- ChIPQCsample("ENCFF711QAL,bam, peaks = openRegionPeaks, annotation = "mm10", chromosomes = "chr20", blacklist = blkList, verboseT = FALSE)
qcRes <- ChIPQCsample("ENCFF711QAL,bam, peaks = openRegionPeaks, annotation = "Mus_musculus.GRCm39.dna.primary_assembly.fa", chromosomes = "chr20", blacklist = blkList, verboseT = FALSE)
qcRes <- ChIPQCsample("ENCFF711QAL,bam, peaks = openRegionPeaks, chromosomes = "chr20", blacklist = blkList, verboseT = FALSE)
qcRes <- ChIPQCsample("ENCFF711QAL,bam, peaks = openRegionPeaks, blacklist = blkList, verboseT = FALSE)
qcRes <- ChIPQCsample("ENCFF711QAL,bam", peaks = openRegionPeaks, blacklist = blkList, verboseT = FALSE)
qcRes <- ChIPQCsample("ENCFF711QAL.bam", peaks = openRegionPeaks, blacklist = blkList, verboseT = FALSE)
CAlls <- annotatePeak(, TxDb = TxDb.Mmusculus.UCSC.mm10.knownGene))
library(clusterProfiler)
library(ChIPseeker)
install.packages(clisterProfiler)
install.packages("clisterProfiler")
install.packages("clusterProfiler")
BiocManager::install("clusterProfiler")
library(clusterProfiler)
library(ChIPseeker)
peaks <- dir(filePath, pattern = "*.narrowPeak", full.names = TRUE)
anno <- annotatePeak(, TxDb = TxDb.Mmusculus.UCSC.mm10.knownGene))
peaks
peaks <- dir(filePath, pattern = "*.narrowPeak", full.names = TRUE)
peaks
filePath <- "~/GitHub/hemopoiesis-differentiation/data/BedFiles/"
sampleNames <- c("ENCFF250YAL", "ENCFF958EPJ", "ENCFF711QAL", "ENCFF620WGW")
peaks <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, "._peaks.narrowpeak"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/Bams/"
sampleNames <- c("ENCFF250YAL", "ENCFF958EPJ", "ENCFF711QAL", "ENCFF620WGW")
peaks <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, "._peaks.narrowpeak"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/Bams/"
sampleNames <- c("ENCFF250YAL", "ENCFF958EPJ", "ENCFF711QAL", "ENCFF620WGW")
filePath <- "~/GitHub/hemopoiesis-differentiation/data/Bams/"
sampleNames <- c("ENCFF250YAL", "ENCFF958EPJ", "ENCFF711QAL", "ENCFF620WGW")
peaks <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, "_peaks.narrowpeak"), header=T, sep="\t"), simplify=F)
peaks
myPeaks <- lapply(peaks, ChIPQC:::GetGRanges, simple = TRUE)
myPeaks <- lapply(peaks, ChIPQC:::GetGRanges, simple = TRUE)
names(myPeaks) <- c("HSC", "HSC", "CMP", "CMP")
myPeaks
consensusToCount <- soGGi:::runConsensusRegions(GRangesList(myPeaks), "none")
consensusToCount
consensusToCount <- soGGi:::runConsensusRegions(GRangesList(myPeaks), "none")
consensusToCount <- soGGi:::runConsensusRegions(GRangesList(myPeaks))
consensusToCount
myPeaks
myGRangesList<-GRangesList(myPeaks)
consensusIDs <- paste0("consensus_", seq(1, length(reduced)))
mcols(reduced) <- do.call(cbind, lapply(myGRangesList, function(x) (reduced %over% x) + 0))
reducedConsensus <- reduced
mcols(reducedConsensus) <- cbind(as.data.frame(mcols(reducedConsensus)), consensusIDs)
consensusIDs <- paste0("consensus_", seq(1, length(reducedConsensus)))
return(reducedConsensus)
reduced <- reduce(unlist(myGRangesList)
consensusIDs <- paste0("consensus_", seq(1, length(reduced)))
mcols(reduced) <- do.call(cbind, lapply(myGRangesList, function(x) (reduced %over% x) + 0))
reducedConsensus <- reduced
mcols(reducedConsensus) <- cbind(as.data.frame(mcols(reducedConsensus)), consensusIDs)
consensusIDs <- paste0("consensus_", seq(1, length(reducedConsensus)))
return(reducedConsensus)
reduced <- reduce(unlist(myGRangesList)
reduced <- reduce(unlist(myGRangesList))
consensusIDs <- paste0("consensus_", seq(1, length(reduced)))
mcols(reduced) <- do.call(cbind, lapply(myGRangesList, function(x) (reduced %over% x) + 0))
reducedConsensus <- reduced
mcols(reducedConsensus) <- cbind(as.data.frame(mcols(reducedConsensus)), consensusIDs)
consensusIDs <- paste0("consensus_", seq(1, length(reducedConsensus)))
return(reducedConsensus)
reducedConsensus
library(limma)
as.data.frame(elementMetadata(reducedConsensus)) %>% dplyr::select(starts_with("HSC")) %>%
vennDiagram(main = "Overlap for Liver open regions")
library(tidyr)
myPlot <- as.data.frame(elementMetadata(reducedConsensus)) %>% dplyr::select(-consensusIDs) %>%
as.matrix %>% t %>% prcomp %>% .$x %>% data.frame %>% mutate(Samples = rownames(.)) %>%
mutate(Group = gsub("_\\d", "", Samples)) %>% ggplot(aes(x = PC1, y = PC2,
colour = Group)) + geom_point(size = 5)
myPlot
library(Rsubread)
occurrences <- elementMetadata(reducedConsensus) %>% as.data.frame %>% dplyr::select(-consensusIDs) %>%
rowSums
table(occurrences) %>% rev %>% cumsum
consensusToCount <- reducedConsensus[occurrences >= 2, ]
consensusToCount
bamsToCount <- dir(filename, full.names = TRUE, pattern = "*.\\.bam$")
regionsToCount <- data.frame(GeneID = paste("ID", seqnames(consensusToCount),
start(consensusToCount), end(consensusToCount), sep = "_"), Chr = seqnames(consensusToCount),
Start = start(consensusToCount), End = end(consensusToCount), Strand = strand(consensusToCount))
fcResults <- featureCounts(bamsToCount, annot.ext = regionsToCount, isPairedEnd = TRUE,
countMultiMappingReads = FALSE, maxFragLength = 100)
myCounts <- fcResults$counts
colnames(myCounts) <- c("HindBrain_1", "HindBrain_2", "Kidney_1", "Kidney_2",
"Liver_1", "Liver_2")
save(myCounts, file = "ATAC_Data/ATAC_RData/countsFromATAC.RData")
BiocManager::install("featureCounts")
library(Rsubread)
BiocManager::install("Rsubread")
library(Rsubread)
regionsToCount <- data.frame(GeneID = paste("ID", seqnames(consensusToCount),
start(consensusToCount), end(consensusToCount), sep = "_"), Chr = seqnames(consensusToCount),
Start = start(consensusToCount), End = end(consensusToCount), Strand = strand(consensusToCount))
fcResults <- featureCounts(bamsToCount, annot.ext = regionsToCount, isPairedEnd = TRUE,
countMultiMappingReads = FALSE, maxFragLength = 100)
myCounts <- fcResults$counts
colnames(myCounts) <- c("HindBrain_1", "HindBrain_2", "Kidney_1", "Kidney_2",
"Liver_1", "Liver_2")
save(myCounts, file = "ATAC_Data/ATAC_RData/countsFromATAC.RData")
regionsToCount <- data.frame(GeneID = paste("ID", seqnames(consensusToCount),
start(consensusToCount), end(consensusToCount), sep = "_"), Chr = seqnames(consensusToCount),
Start = start(consensusToCount), End = end(consensusToCount), Strand = strand(consensusToCount))
fcResults <- featureCounts(bamsToCount, annot.ext = regionsToCount, isPairedEnd = TRUE,
countMultiMappingReads = FALSE, maxFragLength = 100)
fcResults <- featureCounts(bamsToCount, annot.ext = regionsToCount, isPairedEnd = FALSE,
countMultiMappingReads = FALSE, maxFragLength = 100)
fcResults <- featureCounts(bamsToCount, annot.ext = regionsToCount, isPairedEnd = FALSE)
fcResults <- featureCounts(bamsToCount, annot.ext = regionsToCount)
fcResults <- featureCounts(bamsToCount, annot.ext = regionsToCount)
featureCounts()
fcResults <- featureCounts(files=bamsToCount, annot.ext = regionsToCount)
fcResults <- featureCounts(bamsToCount,annot.ext=regionsToCount,isPairedEnd = FALSE,countMultiMappingReads = FALSE,maxFragLength=100)
fcResults <- featureCounts(files=bamsToCount,annot.ext=regionsToCount,isPairedEnd = FALSE,countMultiMappingReads = FALSE,maxFragLength=100)
fcResults <- featureCounts(bamsToCount, annot.ext = regionsToCount, isPairedEnd = FALSE)
bamsToCount
bamsToCount <- dir(filename, full.names = TRUE, pattern = "*.bam$")
bamsToCount
filePath <- "~/GitHub/hemopoiesis-differentiation/data/Bams/"
sampleNames <- c("ENCFF250YAL", "ENCFF958EPJ", "ENCFF711QAL", "ENCFF620WGW")
bamsToCount<- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ",bam"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/Bams/"
sampleNames <- c("ENCFF250YAL", "ENCFF958EPJ", "ENCFF711QAL", "ENCFF620WGW")
bamsToCount<- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".bam"), header=T, sep="\t"), simplify=F)
regionsToCount <- data.frame(GeneID = paste("ID", seqnames(consensusToCount),
start(consensusToCount), end(consensusToCount), sep = "_"), Chr = seqnames(consensusToCount),
Start = start(consensusToCount), End = end(consensusToCount), Strand = strand(consensusToCount))
fcResults <- featureCounts(files=bamsToCount,annot.ext=regionsToCount,isPairedEnd = FALSE,countMultiMappingReads = FALSE,maxFragLength=100)
bamsToCount
bamsToCount<- sapply(sampleNames, function(x) (file=paste0(filePath, x, ".bam"), header=T, sep="\t"), simplify=F)
bamsToCount<- sapply(sampleNames, function(x) dir(file=paste0(filePath, x, ".bam"), header=T, sep="\t"), simplify=F)
bamsToCount<- c(ENCFF250YAL.bam", "ENCFF958EPJ.bam", "ENCFF711QAL.bam", "ENCFF620WGW.bam")
bamsToCount<- c("ENCFF250YAL.bam", "ENCFF958EPJ.bam", "ENCFF711QAL.bam", "ENCFF620WGW.bam")
regionsToCount <- data.frame(GeneID = paste("ID", seqnames(consensusToCount),
start(consensusToCount), end(consensusToCount), sep = "_"), Chr = seqnames(consensusToCount),
Start = start(consensusToCount), End = end(consensusToCount), Strand = strand(consensusToCount))
fcResults <- featureCounts(files=bamsToCount,annot.ext=regionsToCount,isPairedEnd = FALSE,countMultiMappingReads = FALSE,maxFragLength=100)
myCounts <- fcResults$counts
colnames(myCounts) <- c("HindBrain_1", "HindBrain_2", "Kidney_1", "Kidney_2",
"Liver_1", "Liver_2")
save(myCounts, file = "ATAC_Data/ATAC_RData/countsFromATAC.RData")
myCounts <- fcResults$counts
colnames(myCounts) <- c("HSC","HSC","CMP","CMP")
save(myCounts, file = "ATAC_Data/ATAC_RData/countsFromATAC.RData")
save(myCounts, file = "countsFromATAC.RData")
library(DESeq2)
load("ATAC_Data/ATAC_RData/countsFromATAC.RData")
metaData <- data.frame(Group, row.names = colnames(myCounts))
atacDDS <- DESeqDataSetFromMatrix(myCounts, metaData, ~Group, rowRanges = consensusToCount)
atacDDS <- DESeq(atacDDS)
atac_Rlog <- rlog(atacDDS)
plotPCA(atac_Rlog, intgroup = "Group", ntop = nrow(atac_Rlog))
myCounts <- fcResults$counts
colnames(myCounts) <- c("HSC_1","HSC_2","CMP_1","CMP_2")
save(myCounts, file = "countsFromATAC.RData")
library(DESeq2)
load("ATAC_Data/ATAC_RData/countsFromATAC.RData")
metaData <- data.frame(Group, row.names = colnames(myCounts))
atacDDS <- DESeqDataSetFromMatrix(myCounts, metaData, ~Group, rowRanges = consensusToCount)
atacDDS <- DESeq(atacDDS)
atac_Rlog <- rlog(atacDDS)
plotPCA(atac_Rlog, intgroup = "Group", ntop = nrow(atac_Rlog))
library(DESeq2)
load("ATAC_Data/ATAC_RData/countsFromATAC.RData")
metaData <- data.frame(Group, row.names = colnames(myCounts))
atacDDS <- DESeqDataSetFromMatrix(myCounts, metaData, ~Group, rowRanges = consensusToCount)
library(DESeq2)
load("ATAC_Data/ATAC_RData/countsFromATAC.RData")
metaData <- data.frame(Group, row.names = colnames(myCounts))
atacDDS <- DESeqDataSetFromMatrix(myCounts, metaData, ~Group, rowRanges = consensusToCount)
atacDDS <- DESeq(atacDDS)
atac_Rlog <- rlog(atacDDS)
plotPCA(atac_Rlog, intgroup = "Group", ntop = nrow(atac_Rlog))
HSCMinusMCP <- results(atacDDS, c("Group", "HSC, "MCP"), format = "GRanges")
HSCMinusMCP<- HSCMinusMCP[order(HSCMinusMCP$pvalue)]
HSCMinusMCP
HSCMinusMCP <- results(atacDDS, c("Group", "HSC", "MCP"), format = "GRanges")
HSCMinusMCP<- HSCMinusMCP[order(HSCMinusMCP$pvalue)]
HSCMinusMCP
results(atacDDS
results(atacDDS)
HSCMinusCMP<- results(atacDDS, c("Group", "HSC", "CMP"), format = "GRanges")
HSCMinusCMP<- HSCMinusCMP[order(HSCMinusCMP$pvalue)]
HSCMinusCMP
HSCMinusCMP
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
toOverLap <- promoters(TxDb.Mmusculus.UCSC.mm10.knownGene, 500, 500)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
toOverLap <- promoters(TxDb.Mmusculus.UCSC.mm10.knownGene, 500, 500)
LiverMinusHindbrain <- LiverMinusHindbrain[(!is.na(LiverMinusHindbrain$padj) &
SCMinusCMP$pvalue < 0.05) & SCMinusCMP %over% toOverLap,
]
# LiverMinusHindbrain <-
HSCMinusCMP <- HSCMinusCMP[(!is.na(HSCMinusCMP$padj) & SCMinusCMP$pvalue < 0.05) & SCMinusCMP %over% toOverLap]
toOverLap <- promoters(TxDb.Mmusculus.UCSC.mm10.knownGene, 500, 500)
HSCMinusCMP <- HSCMinusCMP[(!is.na(HSCMinusCMP$padj) & HSCMinusCMP$pvalue < 0.05) & SCMinusCMP %over% toOverLap]
HSCMinusCMP <- HSCMinusCMP[(!is.na(HSCMinusCMP$padj) & HSCMinusCMP$pvalue < 0.05) & HSCMinusCMP %over% toOverLap]
makebedtable(SCMinusCMP, "SCMinusCMP.html")
# LiverMinusHindbrain$padj < 0.05,]
makebedtable(HSCMinusCMP, "HSCMinusCMP.html")
makebedtable(HSCMinusCMP, "HSCMinusCMP.html", filename)
# LiverMinusHindbrain$padj < 0.05,]
makebedtable(HSCMinusCMP, "HSCMinusCMP.html", filePath)
library(clusterProfiler)
library(ChIPseeker)
anno_LiverMinusHindbrain <- annotatePeak(LiverMinusHindbrain, TxDb = TxDb.Mmusculus.UCSC.mm10.knownGene)
anno_LiverMinusHindbrain <- annotatePeak(HSCMinusCMP TxDb = TxDb.Mmusculus.UCSC.mm10.knownGene)
anno_LiverMinusHindbrain <- annotatePeak(HSCMinusCMP, TxDb = TxDb.Mmusculus.UCSC.mm10.knownGene)
anno_HSCMinusCMP <- annotatePeak(HSCMinusCMP, TxDb = TxDb.Mmusculus.UCSC.mm10.knownGene)
go1 <- enrichGO(as.data.frame(as.GRanges(anno_HSCMinusCMP )[as.GRanges(anno_HSCMinusCMP )$log2FoldChange >
0])$geneId, OrgDb = "org.Mm.eg.db", ont = "BP", maxGSSize = 5000)
go2 <- enrichGO(as.data.frame(as.GRanges(anno_HSCMinusCMP )[as.GRanges(anno_HSCMinusCMP)$log2FoldChange <
0])$geneId, OrgDb = "org.Mm.eg.db", ont = "BP", maxGSSize = 5000)
BiocManager::install("org.Mm.eg.db")
go1 <- enrichGO(as.data.frame(as.GRanges(anno_HSCMinusCMP )[as.GRanges(anno_HSCMinusCMP )$log2FoldChange >
0])$geneId, OrgDb = "org.Mm.eg.db", ont = "BP", maxGSSize = 5000)
go2 <- enrichGO(as.data.frame(as.GRanges(anno_HSCMinusCMP )[as.GRanges(anno_HSCMinusCMP)$log2FoldChange <
0])$geneId, OrgDb = "org.Mm.eg.db", ont = "BP", maxGSSize = 5000)
head(go1, 10) %>% dplyr::select(ID, Description, pvalue, p.adjust) %>% datatable(elementId = "goEle1")
head(go2, 10) %>% dplyr::select(ID, Description, pvalue, p.adjust) %>% datatable(elementId = "goEle2")
anno_HSCMinusCMP_GRanges <- as.GRanges(anno_HSCMinusCMP)
anno_HSCMinusCMP_GRanges_Up <-
anno_HSCMinusCMP [elementMetadata(
anno_HSCMinusCMP)$log2FoldChange >
0]
anno_HSCMinusCMP_GRanges_Down <-
anno_HSCMinusCMP[elementMetadata(
anno_HSCMinusCMP)$log2FoldChange <  0]
export.bed(anno_LiverMinusHindbrain_GRanges_Up, "anno_HSCMinusCMP.bed")
export.bed(
anno_HSCMinusCMP_GRanges_Down,"
anno_HSCMinusCMP_Down.bed")
anno_HSCMinusCMP _df <- as.data.frame(
anno_HSCMinusCMP)
write.table(anno_HSCMinusCMP_df, "anno_HSCMinusCMP.csv", quote = FALSE, row.names = FALSE, sep = ",")
anno_HSCMinusCMP_GRanges <- as.GRanges(anno_HSCMinusCMP)
anno_HSCMinusCMP_GRanges_Up <-
anno_HSCMinusCMP [elementMetadata(
anno_HSCMinusCMP)$log2FoldChange > 0]
anno_HSCMinusCMP_GRanges_Up <-
anno_HSCMinusCMP[elementMetadata(
anno_HSCMinusCMP)$log2FoldChange > 0]
anno_HSCMinusCMP_GRanges_Up <- anno_HSCMinusCMP[elementMetadata(anno_HSCMinusCMP)$log2FoldChange > 0]
anno_HSCMinusCMP_GRanges <- as.GRanges(anno_HSCMinusCMP)
anno_HSCMinusCMP_GRanges_Up <- anno_HSCMinusCMP[elementMetadata(anno_HSCMinusCMP)$log2FoldChange > 0]
anno_HSCMinusCMP_GRanges_Down <- anno_HSCMinusCMP[elementMetadata(anno_HSCMinusCMP)$log2FoldChange <  0]
anno_HSCMinusCMP
anno_HSCMinusCMP_GRanges <- as.GRanges(anno_HSCMinusCMP)
anno_HSCMinusCMP_GRanges_Up <- anno_HSCMinusCMP[elementMetadata(anno_HSCMinusCMP)$log2FoldChange > 0]
anno_HSCMinusCMP _df <- as.data.frame(anno_HSCMinusCMP)
write.table(anno_HSCMinusCMP_df, "anno_HSCMinusCMP.csv", quote = FALSE, row.names = FALSE, sep = ",")
anno_HSCMinusCMP_df <- as.data.frame(anno_HSCMinusCMP)
write.table(anno_HSCMinusCMP_df, "anno_HSCMinusCMP.csv", quote = FALSE, row.names = FALSE, sep = ",")
plotAnnoPie(anno_HSCMinusCMP)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/"
sampleNames <- c("ENCFF247FEJ", "ENCFF064MKY", "ENCFF667IDY", "ENCFF655LMK", "ENCFF667IDY", "ENCFF655LMK", "ENCFF342WUL", "ENCFF858JHF")
countData.list <- sapply(sampleNames, function(x) read.csv(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
countData.df <- do.call("cbind", countData.list)
colsToKeep <- c(1,grep("expected_count", names(countData.df)))
counts <- countData.df[,colsToKeep]
countss <- counts[rowSums(counts[,(2:5)]) > 0, ]
names(countss) <- c("gene_id",sampleNames)
countss[,2:5] <- round(countss[,2:5])
countss=na.omit(countss)
countss
pheatmap(countss[2:9,],scale = 'row', show_rownames = FALSE)
library(pheatmap)
pheatmap(countss[2:9,],scale = 'row', show_rownames = FALSE)
pheatmap(countss[,2:9],scale = 'row', show_rownames = FALSE)
pheatmap(countss[1:1000,2:9],scale = 'row', show_rownames = FALSE)
correlationMatrix <- cor(countss[2:10000,2:9])
corrplot(correlationMatrix, order = 'hclust',  addrect = 2, addCoef.col = 'white', number.cex = 0.7)
library(corrplot)
corrplot(correlationMatrix, order = 'hclust',  addrect = 2, addCoef.col = 'white', number.cex = 0.7)
coldata=as.factor(sampleMetaData[1:2])
pheatmap(correlationMatrix, annotation_row = coldata,cutree_cols = 2)
sampleMetaData
pheatmap(correlationMatrix,cutree_cols = 2)
sampleMetaData <- data.frame(cell_line=c(rep(c("HSC"), 2), rep(c("CMP"),2)), sampleNames)
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = sampleMetaData)
length(sampleMetaData)
dim(sampleMetaData)
sampleMetaData
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = sampleMetaData[,1:8])
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = sampleMetaData[1:8,1])
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = sampleMetaData[1:8,])
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = sampleMetaData$cell_line)
correlationMatrix
sampleMetaData
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = names(sampleMetaData))
design_trt=model.matrix(~0+cell_line)
cell_line = sampleMetaData$cell_line
design_trt=model.matrix(~0+cell_line)
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = design_trt)
design_trt
coldata=as.matrix(design_trt)
coldata
sampleMetaData
as.matrix(sampleMetaData)
m=as.matrix(sampleMetaData)
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m)
m[,3]=c(rep("control"),2,rep("case"),4)
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m)
m[,3]=c(rep("control"),2),(rep("case"),4)))
m[,3]=c(rep("control"),2), (rep("case"),4)))
m[3,]=c(rep("control"),2), (rep("case"),4)))
m[,3]=c(rep("control"),2), (rep("case"),4)))
m1=c(rep("control"),2), (rep("case"),4)))
m1=c((rep("control"),2), (rep("case"),4)))
m1=c((rep("control"), 2), (rep("case"), 4))
m1=c((rep("control"), 2) , (rep("case"), 4))
m1=c((rep("control",2)) , (rep("case",4)))
m[,3]=c((rep("control",2)) , (rep("case",4)))
m[,3]=c((rep("control",2)) , (rep("case",4)))
m2=cbind(m,m1)
m2=cbind(m,m1)
m2=cbind(m,m1)
m1
m
m[,3]=c((rep("control",2)) , (rep("case",6)))
m[,3]=c((rep("control",2)) , (rep("case",6)))
m1=c((rep("control",2)) , (rep("case",6)))
m2=cbind(m,m1)
m2
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m$m1)
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m[,m1])
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m[m1,])
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m[m1])
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m)
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m2$m1)
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m2$m1)
m3=as.matrix(m2)
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m3$m1)
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m[1,3])
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m[1,1])
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m[1,2])
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m[2,2])
pheatmap(correlationMatrix,cutree_cols = 2, annotation_col = m[2,1])
pheatmap(myCounts)
pheatmap(myCounts[1:100])
pheatmap(myCounts[1:100,])
pheatmap(myCounts[1:100,], scale='row')
pheatmap(myCounts[1:100,], scale='row,show_rownames = FALSE')
pheatmap(myCounts[1:100,], scale='row, show_rownames = FALSE')
pheatmap(myCounts[1:100,], scale='row', show_rownames = FALSE')
`
pheatmap(myCounts[1:100,], scale='row', show_rownames = 'FALSE')
pheatmap(myCounts[1:100,], scale='row', show_rownames = 'FALSE')
`
pheatmap(myCounts[1:100,], scale='row', show_rownames = FALSE)
pheatmap(myCounts[1:100,], scale='row', show_rownames = FALSE)
pheatmap(myCounts[1:100,], scale='row', show_rownames = FALSE)
correlationMatrix <- cor(myCounts[2:10000])
myCounts
correlationMatrix <- cor(myCounts[2:10000,2:5])
library(stats)
correlationMatrix <- cor(myCounts[2:10000,2:5])
correlationMatrix <- cor(myCounts[2:10,2:5])
correlationMatrix <- cor(myCounts[2:10,2:5])
correlationMatrix <- cor(myCounts[,2:5])
correlationMatrix <- cor(myCounts[,2:4])
library(corrplot)
corrplot(correlationMatrix, order = 'hclust',  addrect = 2, addCoef.col = 'white', number.cex = 0.7)
myCounts[5]
myCounts[,5]
myCounts[,4]
correlationMatrix <- cor(myCounts[,2:4])
library(stats)
correlationMatrix <- cor(myCounts[,2:4])
library(corrplot)
corrplot(correlationMatrix, order = 'hclust',  addrect = 2, addCoef.col = 'white', number.cex = 0.7)
library(stats)
correlationMatrix <- cor(myCounts[,1:4])
library(corrplot)
corrplot(correlationMatrix, order = 'hclust',  addrect = 2, addCoef.col = 'white', number.cex = 0.7)
library(corrplot)
corrplot(correlationMatrix, order = 'hclust',  addrect = 2, addCoef.col = 'white', number.cex = 0.7)
library(corrplot)
corrplot(correlationMatrix, order = 'hclust',  addrect = 6, addCoef.col = 'white', number.cex = 0.7)
library(stats)
correlationMatrix <- cor(myCounts[1:1000,1:4])
library(corrplot)
corrplot(correlationMatrix, order = 'hclust',  addrect = 6, addCoef.col = 'white', number.cex = 0.7)
pheatmap(correlationMatrix, annotation_row = coldata,cutree_cols = 2)
pheatmap(correlationMatrix,cutree_cols = 2)
