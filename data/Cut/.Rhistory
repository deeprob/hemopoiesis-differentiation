.libPaths()
.libPaths()
url   <-   " https:// raw . githubusercontent . com / genomicsclass / dagdata / master/ inst/ extdata / spider_ wolff_ gorb _ 2013. csv "
filename   <-   " spider_ wolff_ gorb _ 2013. csv " library ( downloader )
if   (! file . exists( filename ))   download ( url ,   filename ) spider   <-   read . csv( filename ,   skip =1)
url   <-   " https:// raw . githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename   <-   "spider_wolff_gorb_2013.csv"
library (downloader)
if (!file.exists(filename))download(url,filename)spider   <-read.csv(filename,skip =1)
url   <-   " https:// raw . githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename   <-   "spider_wolff_gorb_2013.csv"
library (downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename   <- "spider_wolff_gorb_2013.csv"
library (downloader)
install.packages("downloader")
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename   <- "spider_wolff_gorb_2013.csv"
library (downloader)
if (!file.exists(filename))download(url,filename)spider   <-read.csv(filename,skip =1)
# dataset required
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename   <- "spider_wolff_gorb_2013.csv"
library (downloader)
if(!file.exists(filename))download(url,filename)spider <- read.csv(filename,skip =1)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename   <- "spider_wolff_gorb_2013.csv"
library (downloader)
if(!file.exists(filename)) download(url,filename)spider <- read.csv(filename,skip =1)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename   <- "spider_wolff_gorb_2013.csv"
library (downloader)
if(!file.exists(filename)) download(url,filename)
spider <- read.csv(filename,skip =1)
condition <- factor(c("treated","treated","treated","treated","treated","treated","control","control","control","control","control","control"))
day<- factor(c("A","A","B","B","C","C","A","A","B","B","C","C"))
table(condition,day)
model.matrix(~day + condition)
friction ~ leg + type
fitTL <- lm(friction ~ type + leg, data=spider
summary(fitTL)
(coefs <- coef(fitTL))
BiocManager::install("contrast")
summary(fitTL)
(coefs <- coef(fitTL))
fitTL <- lm(friction ~ type + leg, data=spider
summary(fitTL)
(coefs <- coef(fitTL))
fitTL <- lm(friction ~ type + leg, data=spider
fitTL <- lm(friction ~ type + leg, data=spider)
summary(fitTL)
(coefs <- coef(fitTL))
library(contrast) #Available from CRAN
L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2$testStat
spider $ log2friction <- log2 ( spider $ friction )
The reponse values now look like:
boxplot ( log2friction ~ type *leg , data = spider )
fitln <- lm(log2friction ~ type*leg, data=spider)
summary(fitln)
anova(fitln)
contrast(fitln, list(type="pull",leg="L2"), list(type="pull",leg="L1"))
aov(fitln)
contrast(fitln, list(type="pull",leg="L2"), list(type="pull",leg="L1"))
coef(fitln)["legL2"]
contrast(fitln, list(type="push",leg="L2"), list(type="push",leg="L1"))
coef(fitln)["legL2"] + coef(fitln)["typepush:legL2"]
anova(fitln)
condition <- factor(c("treated","treated","treated","treated","treated","treated","control","control","control","control","control","control"))
table(condition,day)
model.matrix(~day + condition)
model.matrix(	∼ d2 + d3 + treatment)
condition <- factor(c("treated","treated","treated","treated","treated","treated","control","control","control","control","control","control"))
day<- factor(c("d1","d1","d2","d2","d3","d3","d1","d1","d2","d2","d3","d3"))
table(condition,day)
model.matrix(	∼d2 + d3 + treatment)
friction ~ leg + type
fitTL <- lm(friction ~ type + leg, data=spider)
summary(fitTL)
(coefs <- coef(fitTL))
library(contrast)
L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2$testStat
L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2$testStat
L1vsL2 <- contrast(fitTL,list(leg="L1",type="pull"),list(leg="L2",type="pull"))
L1vsL2$testStat
L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2$testStat
spider $ log2friction <- log2 ( spider $ friction )
boxplot ( log2friction ~ type *leg , data = spider )
fitln <- lm(log2friction ~ type*leg, data=spider)
summary(fitln)
aov(fitln)
contrast(fitln, list(type="pull",leg="L2"), list(type="pull",leg="L1"))
contrast(fitln, list(type="pull",leg="L2"), list(type="pull",leg="L1"))
coef(fitln)["legL2"]
aov(fitln)
anova(fitln)
anova(fitln)$type:leg
condition <- factor(c("treated","treated","treated","treated","treated","treated","control","control","control","control","control","control"))
day<- factor(c("d1","d1","d2","d2","d3","d3","d1","d1","d2","d2","d3","d3"))
table(condition,day)
model.matrix(∼d2 + d3 + treatment)
condition <- factor(c("treated","treated","treated","treated","treated","treated","control","control","control","control","control","control"))
day<- factor(c("d1","d1","d2","d2","d3","d3","d1","d1","d2","d2","d3","d3"))
table(condition,day)
model.matrix(∼d2 + d3 + treatment)
condition <- factor(c("treated","treated","treated","treated","treated","treated","control","control","control","control","control","control"))
day<- factor(c("d1","d1","d2","d2","d3","d3","d1","d1","d2","d2","d3","d3"))
table(condition,day)
model.matrix(∼day + condition)
model.matrix(∼d2 + d3 + treatment)
model.matrix(∼day + condition)
model.matrix(∼day$d2 + condition)
model.matrix(∼day[d] + condition)
model.matrix(∼day[d2] + condition)
model.matrix(∼day + condition)
model.matrix(∼day+ condition+day)
model.matrix(∼day+ condition)
model.matrix(∼day + condition)
model.matrix(∼day + condition+day:condition)
model.matrix(∼day:d2 + condition+day:condition)
model.matrix(∼day$d2 + condition)
model.matrix(∼day + condition)
model.matrix(∼day + condition)
ncol(model.matrix(∼day + condition))
(coefficients <- coef(model))
model <- lm(friction ~ type + leg, data=spider)
summary(model)
(coefficients <- coef(model))
library(contrast)
L1vsL2 <- contrast(fitTL,list(leg="L1",type="pull"),list(leg="L2",type="pull"))
L1vsL2$testStat
L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2$testStat
L1vsL2 <- contrast(fitTL,list(leg="L1",type="pull"),list(leg="L2",type="pull"))
L1vsL2 <- contrast(fitTL,list(leg="L1",type="pull"),list(leg="L2",type="pull"))
L1vsL2
L1vsL2$testStat
L1vsL2 <- contrast(fitTL,list(leg="L1",type="pull"),list(leg="L2",type="pull"))
L1vsL2
L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2
linmodel <- lm(log2friction ~ type+leg+type*leg, data=spider)
summary(linmodel)
aov(linmodel)
anova(linmodel)
contrast(fitln, list(type="pull",leg="L2"), list(type="pull",leg="L1"))
coef(fitln)["legL2"]
contrast(linmodel, list(type="pull",leg="L2"), list(type="pull",leg="L1"))
coef(linmodel)["legL2"]
linmodel <- lm(log2friction ~ type+leg+type*leg, data=spider)
summary(linmodel)
contrast(linmodel, list(type="pull",leg="L2"), list(type="pull",leg="L3"))
contrast(linmodel, list(type="push",leg="L2"), list(type="push",leg="L3"))
head(spider)
tail(spider)
anova(linmodel)
model.matrix(∼day + condition + day : condition)
tinytex::install_tinytex()
setwd("~/GitHub/hemopoiesis-differentiation")
setwd("~/GitHub/hemopoiesis-differentiation/data/raw/HSC")
count_control1=read.csv('ENCFF247FEJ.tsv')
countData <- as.matrix(subset(count_control1, select = c(-width)))
countData <- as.matrix(subset(count_control1))
colData_file <- system.file('extdata/rna-seq/SRP021193.colData.tsv',
package = 'compGenomRData')
colData_file <- system.file('extdata/rna-seq/SRP021193.colData.tsv', package = 'compGenomRData')
colData_file
install.packages('compgenomedata')
BiocManager::install('compGenomRData')
colData_file <- system.file('extdata/rna-seq/SRP021193.colData.tsv',
package = 'compGenomRData')
BiocManager::install('compGenomRData')
source("http://bioconductor.org/biocLite.R")
devtools::install_github("compgenomr/compGenomRData")
library('devtools')
BiocManager::install('devtools')
library('compGenomRData')
devtools::install_github("compgenomr/compGenomRData")
colData_file <- system.file('extdata/rna-seq/SRP021193.colData.tsv', package = 'compGenomRData')
colData_file
counts_file <- system.file("extdata/rna-seq/SRP029880.raw_counts.tsv",
package = "compGenomRData")
coldata_file <- system.file("extdata/rna-seq/SRP029880.colData.tsv",
package = "compGenomRData")
counts <- as.matrix(read.table(counts_file, header = T, sep = '\t'))
coldata_file
colData <- read.table(coldata_file, header = T, sep = '\t',
stringsAsFactors = TRUE)
colData
countData
countData <- as.matrix(subset(counts, select = c(-width)))
countData
head(coldata_file)
head(colData)
sampleNames <- c("BF1", "BF2", "BF3", "BM1")
ls
dir
list()
ped
pwd
setwd("~/GitHub/hemopoiesis-differentiation/data/Cut")
sampleNames <- c("ENCFF858JHF_s", "ENCFF342WUL_s", "ENCFF247FEJ", "ENCFF064MKY")
countData.list <- sapply(sampleNames, function(x) read.table(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/Cut/"
sampleNames <- c("ENCFF858JHF_s", "ENCFF342WUL_s", "ENCFF247FEJ", "ENCFF064MKY")
countData.list <- sapply(sampleNames, function(x) read.table(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
head(countData.list)
filePath <- "~/GitHub/hemopoiesis-differentiation/data/Cut/"
sampleNames <- c("ENCFF858JHF_s", "ENCFF342WUL_s", "ENCFF247FEJ", "ENCFF064MKY")
countData.list <- sapply(sampleNames, function(x) read.table(file=paste0(filePath, x, ".tsv"), header=T, sep="\t"), simplify=F)
head(countData.list)
countData.df <- do.call("cbind", countData.list)
colsToKeep <- c(1,grep("expected_count", names(countData.df)))
ct <- countData.df[,colsToKeep]
names(ct) <- c("transcript_id", sampleNames)
ct[,2:13] <- round(ct[,2:13])
dim(ct)
ct
length(ct)
countData.df <- do.call("cbind", countData.list)
colsToKeep <- c(1,grep("expected_count", names(countData.df)))
ct <- countData.df[,colsToKeep]
names(ct) <- c("transcript_id", sampleNames)
dim(countData.list)
length(countData.list)
dim(countData.df)
head(countData.df)
countData.df <- do.call("cbind", countData.list)
colsToKeep <- c(1,grep("expected_count", names(countData.df)))
ct <- countData.df[,colsToKeep]
names(ct) <- c("transcript_id", sampleNames)
ct[,2:13] <- round(ct[,2:13])
countData.df <- do.call("cbind", countData.list)
colsToKeep <- c(1,grep("expected_count", names(countData.df)))
ct <- countData.df[,colsToKeep]
names(ct) <- c("transcript_id", sampleNames)
sampleMetaData <- data.frame(cell_line=c(rep(c("HSC"), 2), rep(c("Erythroblast"))
sampleMetaData <- data.frame(cell_line=c(rep(c("HSC"), 2), rep(c("Erythroblast"),2)))
rownames(sampleMetaData) <- sampleNames
rsem.in <- DESeqDataSetFromMatrix(countData = ct, colData = sampleMetaData, design = ~ cell_line, tidy = T)
rsem.de <- DESeq(rsem.in)
BiocManager::install("deseq2")
BiocManager::install("DESeq2")
library(deseq2)
library(DESeq2)
rsem.in <- DESeqDataSetFromMatrix(countData = ct, colData = sampleMetaData, design = ~ cell_line, tidy = T)
rsem.de <- DESeq(rsem.in)
